#!/bin/bash -e

source $OPENSHIFT_CARTRIDGE_SDK_BASH

cartridge_type="wasnd"

# WAS ND check if the was nd process is running
function isrunning() {

    echo Checking if WAS ND is running
    if [ -f "$WASND_PID_FILE" ]; then
      wfpid=$(cat ${WASND_PID_FILE});
      if /bin/ps --pid $wfpid 1>&2 >/dev/null;
      then
        echo WAS ND is running
        return 0
      fi
    fi
    
    echo WAS ND is not running
    return 1
}

# WAS ND Check if the server http port is up
function ishttpup() {
    let count=0
    while [ ${count} -lt 64 ]
    do
        if /usr/sbin/lsof -P -n -i | grep "${OPENSHIFT_WASND_IP}:${OPENSHIFT_WASND_WEB_PORT} (LISTEN)" > /dev/null; then
            echo "Found ${OPENSHIFT_WASND_IP}:${OPENSHIFT_WASND_WEB_PORT} listening port"
            return 0
        fi
        let count=${count}+1
        echo "Failed to connect to ${OPENSHIFT_WASND_IP}:${OPENSHIFT_WASND_WEB_PORT} but keep trying: $count"
        
        sleep 2
    done

    return 1
}

# WAS ND Check if the server mgmt port is up
function ismgmtup() {
    let count=0
    while [ ${count} -lt 64 ]
    do
        if /usr/sbin/lsof -P -n -i | grep "${OPENSHIFT_WASND_IP}:${OPENSHIFT_WASND_ADMIN_PORT} (LISTEN)" > /dev/null; then
            echo "Found ${OPENSHIFT_WASND_IP}:${OPENSHIFT_WASND_ADMIN_PORT} listening port"
            return 0
        fi
        let count=${count}+1
        echo "Failed to connect to ${OPENSHIFT_WASND_IP}:${OPENSHIFT_WASND_ADMIN_PORT} but keep trying: $count"

        sleep 2
    done

    return 1
}

# TODO build
function build() {
 
  OPENSHIFT_MAVEN_MIRROR="${OPENSHIFT_WASND_DIR}bin/settings.xml"

  max_memory_bytes=$(oo-cgroup-read memory.limit_in_bytes)
  max_memory_mb=$(expr $max_memory_bytes / 1048576)

  # If hot deploy is enabled, we need to restrict the Maven memory size to fit
  # alongside the running application server. For now, just hard-code it to 64
  # and figure out how to apply a scaling factor later.
  if marker_present hot_deploy
    then
      echo "Scaling down Maven heap settings due to presence of hot_deploy marker"

      if [ -z "$MAVEN_JVM_HEAP_RATIO" ]
        then
        MAVEN_JVM_HEAP_RATIO=0.25
    fi
  else
    if [ -z "$MAVEN_JVM_HEAP_RATIO" ]
        then
      MAVEN_JVM_HEAP_RATIO=0.75
    fi
  fi

  max_heap=$( echo "$max_memory_mb * $MAVEN_JVM_HEAP_RATIO" | bc | awk '{print int($1+0.5)}')

  OPENSHIFT_MAVEN_XMX="-Xmx${max_heap}m"

  if [ -z "$BUILD_NUMBER" ]
  then
      if marker_present force_clean_build
      then
          echo ".openshift/markers/force_clean_build found!  Removing Maven dependencies." 1>&2
          rm -rf ${OPENSHIFT_HOMEDIR}.m2/* ${OPENSHIFT_HOMEDIR}.m2/.[^.]*
      fi

      if [ -f ${OPENSHIFT_REPO_DIR}pom.xml ] && ! marker_present skip_maven_build
      then
          export MAVEN_OPTS="$OPENSHIFT_MAVEN_XMX"
          export PATH=$JAVA_HOME/bin:$M2_HOME/bin:$PATH
          pushd ${OPENSHIFT_REPO_DIR} > /dev/null

          if [ -z "$MAVEN_OPTS" ]; then
            export MAVEN_OPTS="$OPENSHIFT_MAVEN_XMX"
          fi

          if [ -z "$MAVEN_ARGS" ]; then
          export MAVEN_ARGS="clean package -Popenshift -DskipTests"
          fi

          echo "Found pom.xml... attempting to build with 'mvn -e ${MAVEN_ARGS}'"

          if [ -n "$OPENSHIFT_MAVEN_MIRROR" ]
          then
              mvn --global-settings $OPENSHIFT_MAVEN_MIRROR --version
              mvn --global-settings $OPENSHIFT_MAVEN_MIRROR $MAVEN_ARGS
          else
              mvn --version
              mvn $MAVEN_ARGS
          fi
          
          popd > /dev/null
      fi
  fi

}

#WAS ND
function deploy() {
  echo Deploying app to WAS ND
  #  if [ "$(ls ${OPENSHIFT_REPO_DIR}deployments)" ]; then
  #    rsync -r --delete --exclude ".*" ${OPENSHIFT_REPO_DIR}deployments/ ${WASND_DEPLOYMENTS_DIR}
  #  fi
  ${WASND_INSTALL_ROOT}/bin/wsadmin.sh -lang jython -profileName ${WASND_PROFILE_NAME} -f ${OPENSHIFT_WASND_DIR}bin/installApp.py -host ${OPENSHIFT_WASND_IP}
}

# WAS ND
function start() {
  echo "Starting $cartridge_type cart"

  # Check for running app
  if isrunning; then
      echo "Application is already running"
  else    
    
     ${WASND_PROFILE_DIR}/bin/startServer.sh ${WASND_SERVER_NAME} 
     
     if ! ishttpup; then
        echo "Timed out waiting for http listening port"
        exit 1
     fi
  fi
  
  echo "Cartridge $cartridge_type started"
}

# WAS ND
function stop() {
  echo "Stopping $cartridge_type cart"

  if isrunning; then
    if [ -f "$WASND_PID_FILE" ]; then
      ${WASND_PROFILE_DIR}/bin/stopServer.sh ${WASND_SERVER_NAME} 
    else
      echo "Failed to locate WAS ND PID File" 1>&2
    fi
  else
     echo "Cart is not running" 
  fi
  
  echo "Cart $cartridge_type stopped"
}

# WAS ND 
function restart() {
    echo "Restarting $cartridge_type cart"

    stop

    start
}

# WAS ND 
function status() {
   if isrunning
   then
      client_result "Application is running"
   else
      client_result "Application is either stopped or inaccessible"
   fi
}

# WAS ND 
function reload() {
    echo "Reloading $cartridge_type cart"
    restart
}

# WAS ND Clean up any log files
function tidy() {
  client_message "Emptying log dir: $OPENSHIFT_WASND_LOG_DIR"
  shopt -s dotglob
  rm -rf $OPENSHIFT_WASND_LOG_DIR/*
  rm -rf $WASND_PROFILE_DIR/logs/$WASND_SERVER_NAME/*.log
}


# WAS ND Thread dump
function threaddump() {
  echo "Thread dump for $cartridge_type cart"

  if ! isrunning; then
        echo "Application is stopped"
        exit 1
  elif [ -f "$WASND_PID_FILE" ]; then
        pid=$(cat $WASND_PID_FILE);
        java_pid=$(ps h --ppid $pid -o '%p')
        kill -3 $java_pid
        client_result "Success"
        client_result ""
        client_result "The thread dump file will be available via: rhc tail $OPENSHIFT_APP_NAME -f ${OPENSHIFT_TMP_DIR}${cartridge_type}.log -o '-n 250'"
  else 
        echo "Failed to locate WAS ND PID File"
  fi 
}

case "$1" in
  build)           build ;;
  deploy)          deploy ;;
  start)           start ;;
  stop)            stop ;;
  restart)         restart ;;
  status)          status ;;
  reload)          reload ;;
  tidy)            tidy ;;
  threaddump)      threaddump ;;
  *)               exit 0;
esac   
